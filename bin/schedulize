#!/usr/bin/env ruby

# This file is based heavily on Capistrano's `capify` command

require 'optparse'
require 'fileutils'

def place_file( base, file, content )
  file = File.join(base, file)
  if File.exists?(file)
    warn "[skip] `#{file}' already exists"
  elsif File.exists?(file.downcase)
    warn "[skip] `#{file.downcase}' exists, which could conflict with `#{file}'"
  elsif !File.exists?(File.dirname(file))
    warn "[skip] directory `#{File.dirname(file)}' does not exist"
  else
    puts "[add] writing `#{file}'"
    File.open(file, "w") { |f| f.write(content) }
  end
end

def js_files_to_copy
  dir = File.expand_path('../../lib/assets/javascripts' , __FILE__)
  Dir[ dir + "/*" ]
end

def css_files_to_copy
  dir = File.expand_path('../../lib/assets/stylesheets' , __FILE__)
  Dir[ dir + "/*" ]
end

def to_js_dir(base)   File.join base, 'vendor/assets/javascripts' end
def to_css_dir(base)  File.join base, 'vendor/assets/stylesheets' end
def js_manifest(base) File.join base, 'app/assets/javascripts/application.js' end
def css_manifest(base) File.join base, 'app/assets/stylesheets/application.css' end

def js_require_content
  <<EOF
//= require use_block
//= require time_pix
//= require justify_tweaks
EOF
end

def insert_js_requires( file )
  manifest_lines = IO.readlines( file )
  ix = manifest_lines.rindex{|l| l =~ %r[^//= require.+(jquery|angular)] }

  manifest_lines[ix] << js_require_content
  puts "[modify] writing `#{file}'"
  File.open(file, "w") { |f| f.write( manifest_lines.join ) }
rescue
  puts "Failed to edit file #{file}; continuing..."
  puts "Be sure these js dependencies are handled:\n#{js_require_content}\n\n"
end

def css_require_content
  <<EOF
 *= require scheduled_resource
EOF
end

def insert_css_requires( file )
  manifest_lines = IO.readlines( file )
  ix = manifest_lines.index{|l| l =~ %r[/^ *\*= require/] }

  manifest_lines[ix] = css_require_content + manifest_lines[ix]
  puts "[modify] writing `#{file}'"
  File.open(file, "w") { |f| f.write( manifest_lines.join ) }
rescue
  puts "Failed to edit file #{file}; continuing..."
  puts "Be sure these css dependencies are handled:\n#{css_require_content}\n\n"
end


PROGRAM = File.basename($0)

OptionParser.new do |opts|
  opts.banner = "Usage: #{PROGRAM} [path]"

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

unless ARGV.empty?
  if !File.exists?(ARGV.first)
    abort "`#{ARGV.first}' does not exist."
  elsif !File.directory?(ARGV.first)
    abort "`#{ARGV.first}' is not a directory."
  elsif ARGV.length > 1
    abort "Too many arguments; please specify only the directory to wheneverize."
  end
end

base = ARGV.empty? ? '.' : ARGV.shift

FileUtils.cp   js_files_to_copy, to_js_dir(base)
FileUtils.cd( to_js_dir(base) ) do
  FileUtils.cp  "blank.jpg",  "Day.jpg"
  FileUtils.cp  "blank.jpg", "Hour.jpg"
end

FileUtils.cp  css_files_to_copy, to_css_dir(base)

insert_js_requires   js_manifest(base)
insert_css_requires css_manifest(base)


config_content = %q{
# Configuration file for ScheduledResource schedule widget.
#

# Classes that represent a resource and resource-use pair.
ResourceKinds:
# Resource:             Resource Use
  ZTimeHeaderDay:       ZTimeLabelDay
  ZTimeHeaderHour:      ZTimeLabelHour

# Other examples:
# ConferenceRoom:       Meeting
# TvStation:            ProgramEvent

# The schedule display sizes itself to the page width.  What span
# of time should this be in seconds?  (Value string is eval'd)
visibleTime: 3.hours

# A row in the display is specified by a pair: (Resource_class, Resource_id)
# The Resource_id is given as a string to be interpreted by the specific
# classes.  For the included ZTime* classes the Resource_id (rid) indicates
# the timezone, [-8 .. -5] represent Pacific .. Eastern US timezones.
Resources:
   - ZTimeHeaderDay       -8
   - ZTimeHeaderHour      -8
   - ZTimeHeaderDay       -5
   - ZTimeHeaderHour      -5
}

place_file( base, 'config/resource_schedule.yml', config_content)



controller_content = <<-CONTROLLER
# Needed this here to get the ZTime* classes in time for session.
require 'scheduled_resource'

class ScheduleController < ApplicationController
  include ScheduledResource::Helper

  before_action :ensure_schedule_config


  # Returns angularjs page (template) which in turn fetches data.
  def index
  end


  # Json data.
  def schedule
    get_data_for_time_span

    render json: @blockss
  end

end
CONTROLLER

place_file( base, 'app/controllers/schedule_controller.rb', controller_content)

